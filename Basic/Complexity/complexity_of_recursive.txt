FINDING THE TIME AND SPACE COMPLEXITY OF RECURSIVE PROGRAME

Example Algo:

	// Algo
	
	Factorial(n):
		if n == 0:
			return 1
		else:
			return n * Factorial(n-1)

	// End of Algo

TIME COMPLEXITY:

	Since there are three basic operatons in the worst case of the algorithm viz,
       							            1. Comparison (n==0)
								    2. Multiply (n* Factorial)
								    3. Subtraction(n-1)

	Let T(n) -> time for the implementation of code with n as input.
		
		T(0) = 1

		T(n) = T(n-1) + 3
	       	     = T(n-2) + 6
	     	     = T(n-3) + 9
		     = T(n-k) + 3*k

		for k = n,
   		     T(n) = T(n-k) + 3*k
     			  = T(0) + 3*n

		therefore: TIME COMPLEXITY : O(3n + 1) = O(n)	

SPACE COMPLEXITY:

example: Factorial(5)

	To calculate a Factorial(5)
		-> means calls

		(Recursion Tree)
		Level 0		Level 1		Level 2		Level 3		Level 4
		Factorial(5) -> Facctorial(4) -> Factorial(3) -> Factorial(2) -> Factorial(1)

		max depth = 5

		Space Complexity = O(n) for this example
